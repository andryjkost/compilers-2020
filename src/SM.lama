import List;
import World;
import State;
import Expr;

fun eval(c, insns){
	case c of
        [s, st, w@[i, o]] -> case insns of
            {} -> c
          | BINOP (b) : p -> case s of x : y : ss -> eval ([binopParser (b, y, x) : ss, st, w], p) esac
          | CONST (n) : p -> eval ([n : s, st, w], p)
          | READ      : p -> case i of x : it -> eval ([x : s, st, [it, o]], p) esac
          | WRITE     : p -> case s of x : ss -> eval ([ss, st, [i, x : o]], p) esac
          | LD    (x) : p -> eval ([st (x) : s, st, w], p)
          | ST    (x) : p -> case s of y : ss -> eval ([s, (st <- [x, y]), w], p) esac
        esac
      esac
}


public fun evalSM(input, insns){
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.

fun compileExpr (expr) {
  case expr of
    Var   (x)         -> singleton (LD (x))
  | Const (n)         -> singleton (CONST (n))
  | Binop (b, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ singleton (BINOP (b))
  esac
}

-- Compiles a statement into a stack machine code.
--Takes a statement, returns a list of stack machine

public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr (expr) +++ singleton (ST (x))
  | Read (x)       -> {READ, ST (x)}
  | Write (expr)   -> compileExpr (expr) +++ singleton (WRITE)
  | Seq (s1, s2)   -> compileSM (s1) +++ compileSM (s2)
  esac
}